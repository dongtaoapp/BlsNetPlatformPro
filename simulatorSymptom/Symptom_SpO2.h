#pragma once
#include <list>
#include ".\symptomvirtual.h"
#include ".\XActionVirtual.h"

#include "..\SimulatorBase\OpSpO2BuildInterface.h"


namespace jysoft { namespace simulator {
	/*-----------------------------------------------------------------------------------------------------------------
	类说明：     模拟人的血氧
	创建人：	 hjg
	创建时间：   2017/2/22
	//-----------------------------------------------------------------------------------------------------------------*/
	class CSymptom_SpO2 : public CSymptomVirtual
	{
	public:
		CSymptom_SpO2(void);
		virtual ~CSymptom_SpO2(void);
	public: //基类函数重载
		/*******************************************************************************/
		// 函数名称： IsKindOf
		// 功能：   判断体征的类别
		// 参数：   const CString &strClassName
		// 返回值: 
		virtual  bool isKindOf( const std::string &strClassName );
		//根据标示名称判断体征参数
		virtual  bool isSymptomCaption(const std::string &strCaption);
		/*******************************************************************************/
		// 函数名称： InitialSymptomValue
		// 功能：   初始化体征值
		// 参数：   IModifiedSymptomsOp *pInterfacePtr
		//          tag_TrendValue *pDefaultTrendValue:  相应体征修改的值返回
		// 返回值: 
		virtual  void InitialSymptomValue(IModifiedSymptomsOp *pInterfacePtr, SimulatePatientType ePatientType);
		/*******************************************************************************/
		// 函数名称： InitialSymptomValue
		// 功能：   初始化体征值
		// 参数：   
		//          tag_TrendValue *pDefaultTrendValue:  相应体征修改的值返回
		//          CXActionVirtual *pVirAction:         对应体征值
		//          short sTransTime:                    转换时间（单位：秒）
		// 返回值: 
		virtual  void InitialSymptomValue( CXActionVirtual *pVirAction, short sTransTime = 0);
		// 函数名称： OnUpdateInterfaceShow
		// 功能：   更新界面显示
		// 参数：   
		// 返回值: 
		virtual  void OnUpdateInterfaceShow() { };
	public:
		//初始化血氧模拟曲线构造器
		void InitialSpO2Build(SimulatePatientType ePatientType);
		//修改血氧模拟曲线构造器
		void ModifySpO2Build();
	public:
		//设置血氧模拟构造器操作接口
		inline void SetSpO2BuildInterface(base::COpSpO2BuildInterface *pInterface) { m_pSpO2BuildInterface = pInterface; };
		inline int  GetValue_SpO2() { return m_nSpO2Value; };
	protected:
		base::COpSpO2BuildInterface   *m_pSpO2BuildInterface; //血氧模拟构造器操作接口
	protected:
		int                      m_nSpO2Value;
	};
}}